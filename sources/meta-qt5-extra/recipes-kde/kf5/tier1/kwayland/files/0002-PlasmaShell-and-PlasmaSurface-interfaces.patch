From 44ade574441cb9516e2d16c9441e58c8eeab4f0a Mon Sep 17 00:00:00 2001
From: Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
Date: Sun, 7 Sep 2014 18:01:36 +0200
Subject: [PATCH 2/4] PlasmaShell and PlasmaSurface interfaces

Conflicts:
	src/client/CMakeLists.txt
	src/client/registry.cpp
	src/client/registry.h

+ names of generated header changed
---
 autotests/client/test_wayland_registry.cpp |   1 +
 src/client/CMakeLists.txt                  |  11 ++
 src/client/plasma_shell.cpp                | 209 +++++++++++++++++++++++
 src/client/plasma_shell.h                  | 191 +++++++++++++++++++++
 src/client/plasma_surface.cpp              | 264 +++++++++++++++++++++++++++++
 src/client/plasma_surface.h                | 210 +++++++++++++++++++++++
 src/client/registry.cpp                    |  24 +++
 src/client/registry.h                      |  16 ++
 8 files changed, 926 insertions(+)
 create mode 100644 src/client/plasma_shell.cpp
 create mode 100644 src/client/plasma_shell.h
 create mode 100644 src/client/plasma_surface.cpp
 create mode 100644 src/client/plasma_surface.h

diff --git a/autotests/client/test_wayland_registry.cpp b/autotests/client/test_wayland_registry.cpp
index d3f6863..7004f5e 100644
--- a/autotests/client/test_wayland_registry.cpp
+++ b/autotests/client/test_wayland_registry.cpp
@@ -237,6 +237,7 @@ void TestWaylandRegistry::testRemoval()
     QVERIFY(registry.hasInterface(KWayland::Client::Registry::Interface::Shm));
     QVERIFY(registry.hasInterface(KWayland::Client::Registry::Interface::SubCompositor));
     QVERIFY(!registry.hasInterface(KWayland::Client::Registry::Interface::FullscreenShell));
+    QVERIFY(!registry.hasInterface(KWayland::Client::Registry::Interface::PlasmaShell));
 
     QSignalSpy seatRemovedSpy(&registry, SIGNAL(seatRemoved(quint32)));
     QVERIFY(seatRemovedSpy.isValid());
diff --git a/src/client/CMakeLists.txt b/src/client/CMakeLists.txt
index b1a1167..b1dfe95 100644
--- a/src/client/CMakeLists.txt
+++ b/src/client/CMakeLists.txt
@@ -1,3 +1,5 @@
+include_directories(${Qt5Gui_PRIVATE_INCLUDE_DIRS})
+
 remove_definitions(-DQT_NO_CAST_FROM_BYTEARRAY)
 remove_definitions(-DQT_NO_CAST_FROM_ASCII)
 remove_definitions(-DQT_NO_CAST_TO_ASCII)
@@ -14,6 +16,8 @@ set(CLIENT_LIB_SRCS
     fullscreen_shell.cpp
     keyboard.cpp
     output.cpp
+    plasma_shell.cpp
+    plasma_surface.cpp
     pointer.cpp
     region.cpp
     registry.cpp
@@ -30,6 +34,11 @@ ecm_add_wayland_client_protocol(CLIENT_LIB_SRCS
     BASENAME fullscreen-shell
 )
 
+ecm_add_wayland_client_protocol(CLIENT_LIB_SRCS
+    PROTOCOL ${KWAYLAND_SOURCE_DIR}/src/client/protocols/plasma-shell.xml
+    BASENAME plasma-shell
+)
+
 add_library(KF5WaylandClient ${CLIENT_LIB_SRCS})
 generate_export_header(KF5WaylandClient
     BASE_NAME
@@ -72,6 +81,8 @@ install(FILES
   fullscreen_shell.h
   keyboard.h
   output.h
+  plasma_shell.h
+  plasma_surface.h
   pointer.h
   region.h
   registry.h
diff --git a/src/client/plasma_shell.cpp b/src/client/plasma_shell.cpp
new file mode 100644
index 0000000..1d3a2f5
--- /dev/null
+++ b/src/client/plasma_shell.cpp
@@ -0,0 +1,209 @@
+/********************************************************************
+Copyright 2014 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
+Copyright 2014 Martin Gräßlin <mgraesslin@kde.org>
+
+This library is free software; you can redistribute it and/or
+modify it under the terms of the GNU Lesser General Public
+License as published by the Free Software Foundation; either
+version 2.1 of the License, or (at your option) version 3, or any
+later version accepted by the membership of KDE e.V. (or its
+successor approved by the membership of KDE e.V.), which shall
+act as a proxy defined in Section 6 of version 3 of the license.
+
+This library is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+Lesser General Public License for more details.
+
+You should have received a copy of the GNU Lesser General Public
+License along with this library.  If not, see <http://www.gnu.org/licenses/>.
+*********************************************************************/
+
+#include "plasma_shell.h"
+#include "plasma_surface.h"
+#include "surface.h"
+
+// Qt
+#include <QGuiApplication>
+#include <qpa/qplatformnativeinterface.h>
+#include <QWindow>
+
+// wayland
+#include <wayland-plasma-shell-client-protocol.h>
+#include <wayland-client-protocol.h>
+
+namespace KWayland
+{
+namespace Client
+{
+
+class PlasmaShell::Private
+{
+public:
+    Private(PlasmaShell *q);
+
+    void setup(org_kde_plasma_shell *s);
+
+    org_kde_plasma_shell *shell = Q_NULLPTR;
+
+private:
+    PlasmaShell *q;
+
+    void handleLoaded();
+
+    static org_kde_plasma_shell_listener s_plasmaShellListener;
+    static void loadedCallback(void *data, org_kde_plasma_shell *shell);
+};
+
+org_kde_plasma_shell_listener PlasmaShell::Private::s_plasmaShellListener = {
+    PlasmaShell::Private::loadedCallback
+};
+
+PlasmaShell::Private::Private(PlasmaShell *q)
+    : q(q)
+{
+}
+
+void PlasmaShell::Private::setup(org_kde_plasma_shell *s)
+{
+    Q_ASSERT(!shell);
+    Q_ASSERT(s);
+    shell = s;
+    org_kde_plasma_shell_add_listener(shell, &s_plasmaShellListener, this);
+}
+
+void PlasmaShell::Private::loadedCallback(void *data, org_kde_plasma_shell *shell)
+{
+    Q_UNUSED(shell);
+
+    auto s = reinterpret_cast<PlasmaShell::Private *>(data);
+    Q_ASSERT(shell == s->shell);
+    s->handleLoaded();
+}
+
+void PlasmaShell::Private::handleLoaded()
+{
+    emit q->loaded();
+}
+
+PlasmaShell::PlasmaShell(QObject *parent)
+    : QObject(parent)
+    , d(new Private(this))
+{
+}
+
+PlasmaShell::~PlasmaShell()
+{
+    release();
+}
+
+bool PlasmaShell::isValid() const
+{
+    return d->shell != Q_NULLPTR;
+}
+
+PlasmaShell::operator org_kde_plasma_shell*()
+{
+    return d->shell;
+}
+
+PlasmaShell::operator org_kde_plasma_shell*() const
+{
+    return d->shell;
+}
+
+void PlasmaShell::release()
+{
+    if (d->shell) {
+        emit interfaceAboutToBeReleased();
+        org_kde_plasma_shell_destroy(d->shell);
+    }
+}
+
+void PlasmaShell::destroy()
+{
+    if (d->shell) {
+        emit interfaceAboutToBeDestroyed();
+        free(d->shell);
+        d->shell = Q_NULLPTR;
+    }
+}
+
+void PlasmaShell::setup(org_kde_plasma_shell *s)
+{
+    d->setup(s);
+}
+
+PlasmaSurface *PlasmaShell::createSurface(wl_surface *surface, QObject *parent)
+{
+    Q_ASSERT(d->shell);
+
+    PlasmaSurface *plasmaSurface = new PlasmaSurface(parent);
+    connect(this, &PlasmaShell::interfaceAboutToBeReleased, plasmaSurface, &PlasmaSurface::release);
+    connect(this, &PlasmaShell::interfaceAboutToBeDestroyed, plasmaSurface, &PlasmaSurface::destroy);
+    plasmaSurface->setup(surface, org_kde_plasma_shell_get_surface(d->shell, surface));
+    return plasmaSurface;
+}
+
+PlasmaSurface *PlasmaShell::createSurface(Surface *surface, QObject *parent)
+{
+    Q_ASSERT(surface);
+    return createSurface(*surface, parent);
+}
+
+PlasmaSurface *PlasmaShell::createSurface(QWindow *window, QObject *parent)
+{
+    Q_ASSERT(window);
+
+    // Platform native interface
+    QPlatformNativeInterface *native = QGuiApplication::platformNativeInterface();
+    Q_ASSERT(native);
+
+    // Make sure the compositor won't create a traditional shell surface
+    window->setFlags(Qt::BypassWindowManagerHint);
+
+    // Create platform window, otherwise we can't get the wl_surface
+    window->winId();
+
+    // Get the Wayland surface for this window
+    wl_surface *wlSurface = static_cast<wl_surface *>(
+                native->nativeResourceForWindow("surface", window));
+
+    return createSurface(wlSurface, parent);
+}
+
+void PlasmaShell::desktopReady()
+{
+    Q_ASSERT(d->shell);
+    org_kde_plasma_shell_desktop_ready(d->shell);
+}
+
+void PlasmaShell::present(QList<wl_surface *> &surfaces)
+{
+    Q_ASSERT(d->shell);
+
+    QByteArray buffer;
+    QDataStream stream(&buffer, QIODevice::WriteOnly);
+    for (const wl_surface *surface: surfaces) {
+        stream << surface;
+    }
+
+    struct wl_array array;
+    array.size = buffer.size();
+    array.data = static_cast<void *>(const_cast<char *>(buffer.constData()));
+    array.alloc = 0;
+
+    org_kde_plasma_shell_present(d->shell, &array);
+}
+
+void PlasmaShell::present(QList<Surface *> &surfaces)
+{
+    QList<wl_surface *> list;
+    for (Surface *surface: surfaces) {
+        list.append(*surface);
+    }
+    present(list);
+}
+
+} // namespace Client
+} // namespace KWayland
diff --git a/src/client/plasma_shell.h b/src/client/plasma_shell.h
new file mode 100644
index 0000000..32106fa
--- /dev/null
+++ b/src/client/plasma_shell.h
@@ -0,0 +1,191 @@
+/********************************************************************
+Copyright 2014 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
+Copyright 2014 Martin Gräßlin <mgraesslin@kde.org>
+
+This library is free software; you can redistribute it and/or
+modify it under the terms of the GNU Lesser General Public
+License as published by the Free Software Foundation; either
+version 2.1 of the License, or (at your option) version 3, or any
+later version accepted by the membership of KDE e.V. (or its
+successor approved by the membership of KDE e.V.), which shall
+act as a proxy defined in Section 6 of version 3 of the license.
+
+This library is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+Lesser General Public License for more details.
+
+You should have received a copy of the GNU Lesser General Public
+License along with this library.  If not, see <http://www.gnu.org/licenses/>.
+*********************************************************************/
+
+#ifndef WAYLAND_PLASMA_SHELL_H
+#define WAYLAND_PLASMA_SHELL_H
+
+#include <QObject>
+
+#include <KWayland/Client/kwaylandclient_export.h>
+
+class QWindow;
+
+struct wl_surface;
+struct org_kde_plasma_shell;
+
+namespace KWayland
+{
+namespace Client
+{
+
+class PlasmaSurface;
+class Surface;
+
+/**
+ * @short Wrapper for the org_kde_plasma_shell interface.
+ *
+ * This class provides a convenient wrapper for the org_kde_plasma_shell interface.
+ * It' used to create a PlasmaSurface and perform operations on surfaces like
+ * move, set screen edge or ask the compositor to present surfaces.
+ *
+ * To use this class one needs to interact with the Registry. There are two
+ * possible ways to create the Shell interface:
+ * @code
+ * PlasmaShell *s = registry->createShell(name, version);
+ * @endcode
+ *
+ * This creates the PlasmaShell and sets it up directly. As an alternative this
+ * can also be done in a more low level way:
+ * @code
+ * PlasmaShell *s = new PlasmaShell;
+ * s->setup(registry->bindShell(name, version));
+ * @endcode
+ *
+ * The PlasmaShell can be used as a drop-in replacement for any wl_shell
+ * pointer as it provides matching cast operators.
+ *
+ * @see Registry
+ * @see PlasmaSurface
+ **/
+class KWAYLANDCLIENT_EXPORT PlasmaShell : public QObject
+{
+    Q_OBJECT
+public:
+   explicit PlasmaShell(QObject *parent = Q_NULLPTR);
+    virtual ~PlasmaShell();
+
+    /**
+     * @returns @c true if managing a org_kde_plasma_shell.
+     **/
+    bool isValid() const;
+    /**
+     * Releases the org_kde_plasma_shell interface.
+     * After the interface has been released the PlasmaShell instance is no
+     * longer valid and can be setup with another org_kde_plasma_shell interface.
+     *
+     * Right before the interface is released the signal interfaceAboutToBeReleased is emitted.
+     * @see interfaceAboutToBeReleased
+     **/
+    void release();
+    /**
+     * Destroys the data hold by this PlasmaShell.
+     * This method is supposed to be used when the connection to the Wayland
+     * server goes away. If the connection is not valid anymore, it's not
+     * possible to call release anymore as that calls into the Wayland
+     * connection and the call would fail. This method cleans up the data, so
+     * that the instance can be deleted or setup to a new org_kde_plasma_shell interface
+     * once there is a new connection available.
+     *
+     * It is suggested to connect this method to ConnectionThread::connectionDied:
+     * @code
+     * connect(connection, &ConnectionThread::connectionDied, shell, &PlasmaShell::destroyed);
+     * @endcode
+     *
+     * Right before the data is destroyed the signal interfaceAboutToBeDestroyed is emitted.
+     *
+     * @see release
+     * @see interfaceAboutToBeDestroyed
+     **/
+    void destroy();
+    /**
+     * Setup this PlasmaShell to manage the @p shell.
+     * When using Registry::createPlasmaShell there is no need to call this
+     * method.
+     **/
+    void setup(org_kde_plasma_shell *s);
+
+    /**
+     * Creates a PlasmaSurface for the given @p surface and sets it up.
+     *
+     * @param surface The native surface to create the PlasmaSurface for
+     * @param parent The parent to use for the PlasmaSurface
+     * @returns created PlasmaSurface
+     **/
+    PlasmaSurface *createSurface(wl_surface *surface, QObject *parent);
+    /**
+     * Creates a ShellSurface for the given @p surface and sets it up.
+     *
+     * @param surface The Surface to create the PlasmaSurface for
+     * @param parent The parent to use for the PlasmaSurface
+     * @returns created PlasmaSurface
+     **/
+    PlasmaSurface *createSurface(Surface *surface, QObject *parent = Q_NULLPTR);
+    /**
+     * Creates a PlasmaSurface for the given @p window and sets it up.
+     * Native surface for @p window is requested from the QPA native
+     * interface, therefore the user must not use another Wayland connection
+     * besides the one created by QPA (thus implicitely available) such as
+     * the one from ConnectionThread.
+     *
+     * @param window The window to create the PlasmaSurface for
+     * @param parent The parent to use for the PlasmaSurface
+     * @returns created PlasmaSurface
+     **/
+    PlasmaSurface *createSurface(QWindow *window, QObject *parent = Q_NULLPTR);
+
+    /**
+     * Inform the Wayland server that the desktop is ready to use.
+     * Compositors often wants to hide the desktop while it is setting
+     * up and fade-in when the desktop is ready.
+     */
+    void desktopReady();
+
+    /**
+     * Present the windows corresponding to the given @p surfaces.
+     *
+     * @param surfaces List of native surfaces to present
+     **/
+    void present(QList<wl_surface *> &surfaces);
+
+    /**
+     * Present the windows corresponding to the given @p surfaces.
+     *
+     * @param surfaces List of surfaces to present
+     **/
+    void present(QList<Surface *> &surfaces);
+
+    operator org_kde_plasma_shell*();
+    operator org_kde_plasma_shell*() const;
+
+Q_SIGNALS:
+    /**
+     * This signal is emitted right before the interface is going to be released.
+     **/
+    void interfaceAboutToBeReleased();
+    /**
+     * This signal is emitted right before the data is going to be destroyed.
+     **/
+    void interfaceAboutToBeDestroyed();
+    /**
+     * This signal is emitted when the desktop is started and begins to
+     * create panels and windows.
+     **/
+    void loaded();
+
+private:
+    class Private;
+    QScopedPointer<Private> d;
+};
+
+} // namespace Client
+} // namespace KWayland
+
+#endif // WAYLAND_PLASMA_SHELL_H
diff --git a/src/client/plasma_surface.cpp b/src/client/plasma_surface.cpp
new file mode 100644
index 0000000..eb75d32
--- /dev/null
+++ b/src/client/plasma_surface.cpp
@@ -0,0 +1,264 @@
+/********************************************************************
+Copyright 2014 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
+Copyright 2014 Martin Gräßlin <mgraesslin@kde.org>
+
+This library is free software; you can redistribute it and/or
+modify it under the terms of the GNU Lesser General Public
+License as published by the Free Software Foundation; either
+version 2.1 of the License, or (at your option) version 3, or any
+later version accepted by the membership of KDE e.V. (or its
+successor approved by the membership of KDE e.V.), which shall
+act as a proxy defined in Section 6 of version 3 of the license.
+
+This library is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+Lesser General Public License for more details.
+
+You should have received a copy of the GNU Lesser General Public
+License along with this library.  If not, see <http://www.gnu.org/licenses/>.
+*********************************************************************/
+
+#include "plasma_surface.h"
+#include "output.h"
+
+// Qt
+#include <QGuiApplication>
+#include <qpa/qplatformnativeinterface.h>
+#include <QScreen>
+
+// wayland
+#include <wayland-plasma-shell-client-protocol.h>
+#include <wayland-client-protocol.h>
+
+namespace KWayland
+{
+namespace Client
+{
+
+class PlasmaSurface::Private
+{
+public:
+    Private(PlasmaSurface *q);
+
+    wl_surface *wlSurface = Q_NULLPTR;
+    org_kde_plasma_surface *surface = Q_NULLPTR;
+    PlasmaSurface::Role role;
+    PlasmaSurface::Flags flags;
+    PlasmaSurface::ScreenEdge screenEdge;
+
+private:
+    PlasmaSurface *q;
+};
+
+PlasmaSurface::Private::Private(PlasmaSurface *q)
+    : role(PlasmaSurface::Role::Unknown)
+    , q(q)
+{
+}
+
+PlasmaSurface::PlasmaSurface(QObject *parent)
+    : QObject(parent)
+    , d(new Private(this))
+{
+}
+
+PlasmaSurface::~PlasmaSurface()
+{
+    if (d->surface) {
+        org_kde_plasma_surface_destroy(d->surface);
+    }
+}
+
+bool PlasmaSurface::isValid() const
+{
+    return d->surface != Q_NULLPTR;
+}
+
+PlasmaSurface::operator org_kde_plasma_surface*()
+{
+    return d->surface;
+}
+
+PlasmaSurface::operator org_kde_plasma_surface*() const
+{
+    return d->surface;
+}
+
+PlasmaSurface::operator wl_surface*()
+{
+    return d->wlSurface;
+}
+
+PlasmaSurface::operator wl_surface*() const
+{
+    return d->wlSurface;
+}
+
+void PlasmaSurface::release()
+{
+    if (d->surface) {
+        org_kde_plasma_surface_destroy(d->surface);
+        d->surface = Q_NULLPTR;
+    }
+}
+
+void PlasmaSurface::destroy()
+{
+    if (d->surface) {
+        free(d->surface);
+        d->surface = Q_NULLPTR;
+    }
+}
+
+void PlasmaSurface::setOutput(wl_output *output)
+{
+    Q_ASSERT(d->surface);
+    Q_ASSERT(output);
+    org_kde_plasma_surface_set_output(d->surface, output);
+}
+
+void PlasmaSurface::setOutput(Output *output)
+{
+    Q_ASSERT(output);
+    setOutput(*output);
+}
+
+void PlasmaSurface::setOutput(QScreen *screen)
+{
+    Q_ASSERT(screen);
+
+    // Platform native interface
+    QPlatformNativeInterface *native = QGuiApplication::platformNativeInterface();
+    Q_ASSERT(native);
+
+    // Get the wl_output
+    wl_output *wlOutput = static_cast<wl_output *>(
+                native->nativeResourceForScreen("output", screen));
+    setOutput(wlOutput);
+}
+
+void PlasmaSurface::move(const QPoint &pos)
+{
+    Q_ASSERT(d->surface);
+    org_kde_plasma_surface_set_position(d->surface, pos.x(), pos.y());
+}
+
+PlasmaSurface::Role PlasmaSurface::role() const
+{
+    return d->role;
+}
+
+void PlasmaSurface::setRole(const Role &role)
+{
+    Q_ASSERT(d->surface);
+
+    if (d->role == role)
+        return;
+
+    quint32 wlRole = ORG_KDE_PLASMA_SURFACE_ROLE_NONE;
+    switch (role) {
+    case Role::Splash:
+        wlRole = ORG_KDE_PLASMA_SURFACE_ROLE_SPLASH;
+        break;
+    case Role::Desktop:
+        wlRole = ORG_KDE_PLASMA_SURFACE_ROLE_DESKTOP;
+        break;
+    case Role::Dashboard:
+        wlRole = ORG_KDE_PLASMA_SURFACE_ROLE_DASHBOARD;
+        break;
+    case Role::Panel:
+        wlRole = ORG_KDE_PLASMA_SURFACE_ROLE_PANEL;
+        break;
+    case Role::Overlay:
+        wlRole = ORG_KDE_PLASMA_SURFACE_ROLE_OVERLAY;
+        break;
+    case Role::Notification:
+        wlRole = ORG_KDE_PLASMA_SURFACE_ROLE_NOTIFICATION;
+        break;
+    case Role::Lock:
+        wlRole = ORG_KDE_PLASMA_SURFACE_ROLE_LOCK;
+        break;
+    default:
+        break;
+    }
+
+    d->role = role;
+    org_kde_plasma_surface_set_role(d->surface, wlRole);
+    emit roleChanged(role);
+}
+
+PlasmaSurface::Flags PlasmaSurface::flags() const
+{
+    return d->flags;
+}
+
+void PlasmaSurface::setFlags(const Flags &flags)
+{
+    Q_ASSERT(d->surface);
+
+    if (d->flags == flags)
+        return;
+
+    quint32 wlFlags = 0;
+    if (flags & Flag::PanelAlwaysVisible) {
+        wlFlags |= ORG_KDE_PLASMA_SURFACE_FLAG_PANEL_ALWAYS_VISIBLE;
+    }
+    if (flags & Flag::PanelAutoHide) {
+        wlFlags |= ORG_KDE_PLASMA_SURFACE_FLAG_PANEL_AUTO_HIDE;
+    }
+    if (flags & Flag::PanelWindowsCanCover) {
+        wlFlags |= ORG_KDE_PLASMA_SURFACE_FLAG_PANEL_WINDOWS_CAN_COVER;
+    }
+    if (flags & Flag::PanelWindowsGoBelow) {
+        wlFlags |= ORG_KDE_PLASMA_SURFACE_FLAG_PANEL_WINDOWS_GO_BELOW;
+    }
+
+    d->flags = flags;
+    org_kde_plasma_surface_set_flags(d->surface, wlFlags);
+    emit flagsChanged(flags);
+}
+
+PlasmaSurface::ScreenEdge PlasmaSurface::screenEdge() const
+{
+    return d->screenEdge;
+}
+
+void PlasmaSurface::setScreenEdge(const ScreenEdge &edge)
+{
+    Q_ASSERT(d->surface);
+
+    if (d->screenEdge == edge)
+        return;
+
+    qint32 wlEdge = ORG_KDE_PLASMA_SURFACE_SCREEN_EDGE_NONE;
+    switch (edge) {
+    case ScreenEdge::Left:
+        wlEdge = ORG_KDE_PLASMA_SURFACE_SCREEN_EDGE_LEFT;
+    case ScreenEdge::Top:
+        wlEdge = ORG_KDE_PLASMA_SURFACE_SCREEN_EDGE_TOP;
+    case ScreenEdge::Right:
+        wlEdge = ORG_KDE_PLASMA_SURFACE_SCREEN_EDGE_RIGHT;
+    case ScreenEdge::Bottom:
+        wlEdge = ORG_KDE_PLASMA_SURFACE_SCREEN_EDGE_BOTTOM;
+    default:
+        break;
+    }
+
+    d->screenEdge = edge;
+    org_kde_plasma_surface_set_screen_edge(d->surface, wlEdge);
+    emit screenEdgeChanged(edge);
+}
+
+void PlasmaSurface::setup(wl_surface *s, org_kde_plasma_surface *ps)
+{
+    Q_ASSERT(!d->wlSurface);
+    Q_ASSERT(!d->surface);
+    Q_ASSERT(s);
+    Q_ASSERT(ps);
+    d->wlSurface = s;
+    d->surface = ps;
+}
+
+} // namespace Client
+} // namespace KWayland
diff --git a/src/client/plasma_surface.h b/src/client/plasma_surface.h
new file mode 100644
index 0000000..689e624
--- /dev/null
+++ b/src/client/plasma_surface.h
@@ -0,0 +1,210 @@
+/********************************************************************
+Copyright 2014 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
+Copyright 2014 Martin Gräßlin <mgraesslin@kde.org>
+
+This library is free software; you can redistribute it and/or
+modify it under the terms of the GNU Lesser General Public
+License as published by the Free Software Foundation; either
+version 2.1 of the License, or (at your option) version 3, or any
+later version accepted by the membership of KDE e.V. (or its
+successor approved by the membership of KDE e.V.), which shall
+act as a proxy defined in Section 6 of version 3 of the license.
+
+This library is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+Lesser General Public License for more details.
+
+You should have received a copy of the GNU Lesser General Public
+License along with this library.  If not, see <http://www.gnu.org/licenses/>.
+*********************************************************************/
+
+#ifndef WAYLAND_PLASMA_SURFACE_H
+#define WAYLAND_PLASMA_SURFACE_H
+
+#include <QObject>
+
+#include <KWayland/Client/kwaylandclient_export.h>
+
+class QScreen;
+
+struct wl_output;
+struct wl_surface;
+struct org_kde_plasma_surface;
+
+namespace KWayland
+{
+namespace Client
+{
+
+class Output;
+class PlasmaShell;
+class Surface;
+
+/**
+ * @short Wrapper for the org_kde_plasma_surface interface.
+ *
+ * This class is a convenient wrapper for the org_kde_plasma_surface interface.
+ *
+ * To create an instance use PlasmaShell::createSurface.
+ *
+ * @see PlasmaShell
+ * @see Surface
+ **/
+class KWAYLANDCLIENT_EXPORT PlasmaSurface : public QObject
+{
+    Q_OBJECT
+    /**
+     * The role of the PlasmaSurface.
+     **/
+    Q_PROPERTY(Role role READ role WRITE setRole NOTIFY roleChanged)
+    /**
+     * Flags that change the PlasmaSurface behavior.
+     */
+    Q_PROPERTY(Flags flags READ flags WRITE setFlags NOTIFY flagsChanged)
+    /**
+     * Screen edge for activation.
+     **/
+    Q_PROPERTY(ScreenEdge screenEdge READ screenEdge WRITE setScreenEdge NOTIFY screenEdgeChanged)
+public:
+    enum class Role {
+        Unknown = 0,  ///< Role is unknown
+        Splash,       ///< Splash screen
+        Desktop,      ///< Desktop window
+        Dashboard,    ///< Dashboard window
+        Panel,        ///< Panel and its configuration window
+        Overlay,      ///< Overlay (OSD window)
+        Notification, ///< Notification window
+        Lock          ///< Screen locker
+    };
+
+    enum class Flag {
+        PanelAlwaysVisible   = 0x0001, ///< Windows below panel
+        PanelAutoHide        = 0x0002, ///< Panel is shown and hidden automatically
+        PanelWindowsCanCover = 0x0004, ///< Windows cover panel
+        PanelWindowsGoBelow  = 0x0008  ///< Windows below panel but take whole space
+    };
+    Q_DECLARE_FLAGS(Flags, Flag)
+
+    enum class ScreenEdge {
+        None,         ///< No activation
+        Left,         ///< Left edge
+        Top,          ///< Top edge
+        Right,        ///< Right edge
+        Bottom        ///< Bottom edge
+    };
+
+    virtual ~PlasmaSurface();
+
+    /**
+     * @returns @c true if managing a org_kde_plasma_surface.
+     **/
+    bool isValid() const;
+    /**
+     * Releases the org_kde_surface interface.
+     * After the interface has been released the PlasmaSurface instance is no
+     * longer valid and can be setup with another org_kde_plasma_surface interface.
+     *
+     * This method is automatically invoked when the PlasmaShell which created this
+     * PlasmaSurface gets released.
+     **/
+    void release();
+    /**
+     * Destroys the data hold by this PlasmaSurface.
+     * This method is supposed to be used when the connection to the Wayland
+     * server goes away. If the connection is not valid anymore, it's not
+     * possible to call release anymore as that calls into the Wayland
+     * connection and the call would fail. This method cleans up the data, so
+     * that the instance can be deleted or setup to a new org_kde_plasma_surface interface
+     * once there is a new connection available.
+     *
+     * This method is automatically invoked when the PlasmaShell which created this
+     * PlasmaSurface gets destroyed.
+     *
+     * @see release
+     **/
+    void destroy();
+
+    /**
+     * Sets the output where this surface will be mapped on.
+     *
+     * @param output Output where this surface will be mapped on
+     **/
+    void setOutput(wl_output *output);
+    /**
+     * Sets the output where this surface will be mapped on.
+     *
+     * @param output Output where this surface will be mapped on
+     **/
+    void setOutput(Output *output);
+    /**
+     * Sets the screen where this surface will be mapped on.
+     * Native output for @p screen is requested from the QPA native
+     * interface, therefore the user must not use another Wayland connection
+     * besides the one created by QPA (thus implicitely available) such as
+     * the one from ConnectionThread.
+     *
+     * @param screen Screen where this surface will be mapped on
+     **/
+    void setOutput(QScreen *screen);
+
+    /**
+     * Move the surface to @p pos coordinates.
+     * Coordinates are in global space.
+     *
+     * @param pos Position in global coordinates space.
+     *
+     * @see setOutput
+     **/
+    void move(const QPoint &pos);
+
+    Role role() const;
+    void setRole(const Role &role);
+
+    Flags flags() const;
+    void setFlags(const Flags &flags);
+
+    ScreenEdge screenEdge() const;
+    void setScreenEdge(const ScreenEdge &edge);
+
+    operator org_kde_plasma_surface*();
+    operator org_kde_plasma_surface*() const;
+
+    operator wl_surface*();
+    operator wl_surface*() const;
+
+Q_SIGNALS:
+    /**
+     * Emitted when the role is changed.
+     **/
+    void roleChanged(const Role &role);
+    /**
+     * Emitted when flags are changed.
+     **/
+    void flagsChanged(const Flags &flags);
+    /**
+     * Emitted when the screen edge for activation is changed.
+     **/
+    void screenEdgeChanged(const ScreenEdge &edge);
+
+private:
+    class Private;
+    QScopedPointer<Private> d;
+
+    explicit PlasmaSurface(QObject *parent = Q_NULLPTR);
+
+    /**
+     * Setup this PlasmaSurface to manage the @p surface.
+     * This method is invoked by PlasmaShell::createSurface.
+     **/
+    void setup(wl_surface *s, org_kde_plasma_surface *ps);
+
+    friend class PlasmaShell;
+};
+
+Q_DECLARE_OPERATORS_FOR_FLAGS(PlasmaSurface::Flags)
+
+} // namespace Client
+} // namespace KWayland
+
+#endif // WAYLAND_PLASMA_SURFACE_H
diff --git a/src/client/registry.cpp b/src/client/registry.cpp
index 19cce81..192af78 100644
--- a/src/client/registry.cpp
+++ b/src/client/registry.cpp
@@ -24,6 +24,7 @@ License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 #include "event_queue.h"
 #include "fullscreen_shell.h"
 #include "output.h"
+#include "plasma_shell.h"
 #include "seat.h"
 #include "shell.h"
 #include "shm_pool.h"
@@ -34,6 +35,7 @@ License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 // wayland
 #include <wayland-client-protocol.h>
 #include <wayland-fullscreen-shell-client-protocol.h>
+#include <wayland-plasma-shell-client-protocol.h>
 
 namespace KWayland
 {
@@ -211,6 +213,8 @@ static Registry::Interface nameToInterface(const char *interface)
         return Registry::Interface::SubCompositor;
     } else if (strcmp(interface, "wl_data_device_manager") == 0) {
         return Registry::Interface::DataDeviceManager;
+    } else if (strcmp(interface, "org_kde_plasma_shell") == 0) {
+        return Registry::Interface::PlasmaShell;
     }
     return Registry::Interface::Unknown;
 }
@@ -250,6 +254,9 @@ void Registry::Private::handleAnnounce(uint32_t name, const char *interface, uin
     case Interface::DataDeviceManager:
         emit q->dataDeviceManagerAnnounced(name, version);
         break;
+    case Interface::PlasmaShell:
+        emit q->plasmaShellAnnounced(name, version);
+        break;
     case Interface::Unknown:
     default:
         // nothing
@@ -292,6 +299,9 @@ void Registry::Private::handleRemove(uint32_t name)
         case Interface::DataDeviceManager:
             emit q->dataDeviceManagerRemoved(data.name);
             break;
+        case Interface::PlasmaShell:
+            emit q->plasmaShellRemoved(data.name);
+            break;
         case Interface::Unknown:
         default:
             // nothing
@@ -351,6 +361,11 @@ _wl_fullscreen_shell *Registry::bindFullscreenShell(uint32_t name, uint32_t vers
     return d->bind<_wl_fullscreen_shell>(Interface::FullscreenShell, name, version);
 }
 
+org_kde_plasma_shell *Registry::bindPlasmaShell(uint32_t name, uint32_t version) const
+{
+    return d->bind<org_kde_plasma_shell>(Interface::PlasmaShell, name, version);
+}
+
 wl_data_device_manager *Registry::bindDataDeviceManager(uint32_t name, uint32_t version) const
 {
     return d->bind<wl_data_device_manager>(Interface::DataDeviceManager, name, qMin(s_dataDeviceManagerMaxVersion, version));
@@ -418,6 +433,13 @@ DataDeviceManager *Registry::createDataDeviceManager(quint32 name, quint32 versi
     return m;
 }
 
+PlasmaShell *Registry::createPlasmaShell(quint32 name, quint32 version, QObject *parent)
+{
+    PlasmaShell *s = new PlasmaShell(parent);
+    s->setup(bindPlasmaShell(name, version));
+    return s;
+}
+
 static const wl_interface *wlInterface(Registry::Interface interface)
 {
     switch (interface) {
@@ -437,6 +459,8 @@ static const wl_interface *wlInterface(Registry::Interface interface)
         return &wl_subcompositor_interface;
     case Registry::Interface::DataDeviceManager:
         return &wl_data_device_manager_interface;
+    case Registry::Interface::PlasmaShell:
+        return &org_kde_plasma_shell_interface;
     case Registry::Interface::Unknown:
     default:
         return nullptr;
diff --git a/src/client/registry.h b/src/client/registry.h
index 52ef843..5fbb499 100644
--- a/src/client/registry.h
+++ b/src/client/registry.h
@@ -35,6 +35,7 @@ struct wl_shell;
 struct wl_shm;
 struct wl_subcompositor;
 struct _wl_fullscreen_shell;
+struct org_kde_plasma_shell;
 
 namespace KWayland
 {
@@ -47,6 +48,7 @@ class DataDeviceManager;
 class EventQueue;
 class FullscreenShell;
 class Output;
+class PlasmaShell;
 class Seat;
 class Shell;
 class ShmPool;
@@ -93,6 +95,7 @@ public:
         Seat,       ///< Refers to the wl_seat interface
         Shm,        ///< Refers to the wl_shm interface
         Output,     ///< Refers to the wl_output interface
+        PlasmaShell,    ///< Refers to the org_kde_plasma_shell interface
         FullscreenShell, ///< Refers to the _wl_fullscreen_shell interface
         SubCompositor, ///< Refers to the wl_subcompositor interface;
         DataDeviceManager ///< Refers to the wl_data_device_manager interface
@@ -227,6 +230,7 @@ public:
      **/
     _wl_fullscreen_shell *bindFullscreenShell(uint32_t name, uint32_t version) const;
     wl_data_device_manager *bindDataDeviceManager(uint32_t name, uint32_t version) const;
+    org_kde_plasma_shell *bindPlasmaShell(uint32_t name, uint32_t version) const;
 
     /**
      * Creates a Compositor and sets it up to manage the interface identified by
@@ -334,6 +338,7 @@ public:
      **/
     FullscreenShell *createFullscreenShell(quint32 name, quint32 version, QObject *parent = nullptr);
     DataDeviceManager *createDataDeviceManager(quint32 name, quint32 version, QObject *parent = nullptr);
+    PlasmaShell *createPlasmaShell(quint32 name, quint32 version, QObject *parent = nullptr);
 
     operator wl_registry*();
     operator wl_registry*() const;
@@ -377,6 +382,12 @@ Q_SIGNALS:
      **/
     void outputAnnounced(quint32 name, quint32 version);
     /**
+     * Emitted whenever a org_kde_plasma_shell interface gets announced.
+     * @param name The name for the announced interface
+     * @param version The maximum supported version of the announced interface
+     **/
+    void plasmaShellAnnounced(quint32 name, quint32 version);
+    /**
      * Emitted whenever a _wl_fullscreen_shell interface gets announced.
      * @param name The name for the announced interface
      * @param version The maximum supported version of the announced interface
@@ -414,6 +425,11 @@ Q_SIGNALS:
      **/
     void outputRemoved(quint32 name);
     /**
+     * Emitted whenever a org_kde_plasma_shell interface gets removed.
+     * @param name The name for the removed interface
+     **/
+    void plasmaShellRemoved(quint32 name);
+    /**
      * Emitted whenever a _wl_fullscreen_shell interface gets removed.
      * @param name The name for the removed interface
      **/
-- 
1.8.3.1

